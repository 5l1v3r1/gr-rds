# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.35
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _rds
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class gr_rds_diff_decoder_sptr(_object):
    """Proxy of C++ gr_rds_diff_decoder_sptr class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gr_rds_diff_decoder_sptr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gr_rds_diff_decoder_sptr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rds_diff_decoder_sptr
        __init__(self,  p) -> gr_rds_diff_decoder_sptr
        """
        this = _rds.new_gr_rds_diff_decoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rds.gr_rds_diff_decoder_sptr___deref__(*args)

    __swig_destroy__ = _rds.delete_gr_rds_diff_decoder_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rds.gr_rds_diff_decoder_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rds.gr_rds_diff_decoder_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rds.gr_rds_diff_decoder_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rds.gr_rds_diff_decoder_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rds.gr_rds_diff_decoder_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rds.gr_rds_diff_decoder_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rds.gr_rds_diff_decoder_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rds.gr_rds_diff_decoder_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rds.gr_rds_diff_decoder_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rds.gr_rds_diff_decoder_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rds.gr_rds_diff_decoder_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rds.gr_rds_diff_decoder_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rds.gr_rds_diff_decoder_sptr_check_topology(*args)

gr_rds_diff_decoder_sptr_swigregister = _rds.gr_rds_diff_decoder_sptr_swigregister
gr_rds_diff_decoder_sptr_swigregister(gr_rds_diff_decoder_sptr)


def gr_rds_diff_decoder_block(*args):
  """gr_rds_diff_decoder_block(gr_rds_diff_decoder_sptr r) -> gr_block_sptr"""
  return _rds.gr_rds_diff_decoder_block(*args)
gr_rds_diff_decoder_sptr.block = lambda self: gr_rds_diff_decoder_block (self)
gr_rds_diff_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def diff_decoder(*args):
  """diff_decoder() -> gr_rds_diff_decoder_sptr"""
  return _rds.diff_decoder(*args)
class gr_rds_diff_encoder_sptr(_object):
    """Proxy of C++ gr_rds_diff_encoder_sptr class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gr_rds_diff_encoder_sptr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gr_rds_diff_encoder_sptr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rds_diff_encoder_sptr
        __init__(self,  p) -> gr_rds_diff_encoder_sptr
        """
        this = _rds.new_gr_rds_diff_encoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rds.gr_rds_diff_encoder_sptr___deref__(*args)

    __swig_destroy__ = _rds.delete_gr_rds_diff_encoder_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rds.gr_rds_diff_encoder_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rds.gr_rds_diff_encoder_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rds.gr_rds_diff_encoder_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rds.gr_rds_diff_encoder_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rds.gr_rds_diff_encoder_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rds.gr_rds_diff_encoder_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rds.gr_rds_diff_encoder_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rds.gr_rds_diff_encoder_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rds.gr_rds_diff_encoder_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rds.gr_rds_diff_encoder_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rds.gr_rds_diff_encoder_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rds.gr_rds_diff_encoder_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rds.gr_rds_diff_encoder_sptr_check_topology(*args)

gr_rds_diff_encoder_sptr_swigregister = _rds.gr_rds_diff_encoder_sptr_swigregister
gr_rds_diff_encoder_sptr_swigregister(gr_rds_diff_encoder_sptr)


def gr_rds_diff_encoder_block(*args):
  """gr_rds_diff_encoder_block(gr_rds_diff_encoder_sptr r) -> gr_block_sptr"""
  return _rds.gr_rds_diff_encoder_block(*args)
gr_rds_diff_encoder_sptr.block = lambda self: gr_rds_diff_encoder_block (self)
gr_rds_diff_encoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def diff_encoder(*args):
  """diff_encoder() -> gr_rds_diff_encoder_sptr"""
  return _rds.diff_encoder(*args)
class gr_rds_biphase_decoder_sptr(_object):
    """Proxy of C++ gr_rds_biphase_decoder_sptr class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gr_rds_biphase_decoder_sptr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gr_rds_biphase_decoder_sptr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rds_biphase_decoder_sptr
        __init__(self,  p) -> gr_rds_biphase_decoder_sptr
        """
        this = _rds.new_gr_rds_biphase_decoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rds.gr_rds_biphase_decoder_sptr___deref__(*args)

    __swig_destroy__ = _rds.delete_gr_rds_biphase_decoder_sptr
    __del__ = lambda self : None;
    def reset(*args):
        """reset(self)"""
        return _rds.gr_rds_biphase_decoder_sptr_reset(*args)

    def history(*args):
        """history(self) -> unsigned int"""
        return _rds.gr_rds_biphase_decoder_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rds.gr_rds_biphase_decoder_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rds.gr_rds_biphase_decoder_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rds.gr_rds_biphase_decoder_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rds.gr_rds_biphase_decoder_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rds.gr_rds_biphase_decoder_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rds.gr_rds_biphase_decoder_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rds.gr_rds_biphase_decoder_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rds.gr_rds_biphase_decoder_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rds.gr_rds_biphase_decoder_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rds.gr_rds_biphase_decoder_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rds.gr_rds_biphase_decoder_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rds.gr_rds_biphase_decoder_sptr_check_topology(*args)

gr_rds_biphase_decoder_sptr_swigregister = _rds.gr_rds_biphase_decoder_sptr_swigregister
gr_rds_biphase_decoder_sptr_swigregister(gr_rds_biphase_decoder_sptr)


def gr_rds_biphase_decoder_block(*args):
  """gr_rds_biphase_decoder_block(gr_rds_biphase_decoder_sptr r) -> gr_block_sptr"""
  return _rds.gr_rds_biphase_decoder_block(*args)
gr_rds_biphase_decoder_sptr.block = lambda self: gr_rds_biphase_decoder_block (self)
gr_rds_biphase_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def biphase_decoder(*args):
  """biphase_decoder(double input_sample_rate) -> gr_rds_biphase_decoder_sptr"""
  return _rds.biphase_decoder(*args)
class gr_rds_data_decoder_sptr(_object):
    """Proxy of C++ gr_rds_data_decoder_sptr class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gr_rds_data_decoder_sptr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gr_rds_data_decoder_sptr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rds_data_decoder_sptr
        __init__(self,  p) -> gr_rds_data_decoder_sptr
        """
        this = _rds.new_gr_rds_data_decoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rds.gr_rds_data_decoder_sptr___deref__(*args)

    __swig_destroy__ = _rds.delete_gr_rds_data_decoder_sptr
    __del__ = lambda self : None;
    def reset(*args):
        """reset(self)"""
        return _rds.gr_rds_data_decoder_sptr_reset(*args)

    def history(*args):
        """history(self) -> unsigned int"""
        return _rds.gr_rds_data_decoder_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rds.gr_rds_data_decoder_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rds.gr_rds_data_decoder_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rds.gr_rds_data_decoder_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rds.gr_rds_data_decoder_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rds.gr_rds_data_decoder_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rds.gr_rds_data_decoder_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rds.gr_rds_data_decoder_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rds.gr_rds_data_decoder_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rds.gr_rds_data_decoder_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rds.gr_rds_data_decoder_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rds.gr_rds_data_decoder_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rds.gr_rds_data_decoder_sptr_check_topology(*args)

gr_rds_data_decoder_sptr_swigregister = _rds.gr_rds_data_decoder_sptr_swigregister
gr_rds_data_decoder_sptr_swigregister(gr_rds_data_decoder_sptr)


def gr_rds_data_decoder_block(*args):
  """gr_rds_data_decoder_block(gr_rds_data_decoder_sptr r) -> gr_block_sptr"""
  return _rds.gr_rds_data_decoder_block(*args)
gr_rds_data_decoder_sptr.block = lambda self: gr_rds_data_decoder_block (self)
gr_rds_data_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def data_decoder(*args):
  """data_decoder(gr_msg_queue_sptr msgq) -> gr_rds_data_decoder_sptr"""
  return _rds.data_decoder(*args)
class gr_rds_freq_divider_sptr(_object):
    """Proxy of C++ gr_rds_freq_divider_sptr class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gr_rds_freq_divider_sptr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gr_rds_freq_divider_sptr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rds_freq_divider_sptr
        __init__(self,  p) -> gr_rds_freq_divider_sptr
        """
        this = _rds.new_gr_rds_freq_divider_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(*args):
        """__deref__(self)"""
        return _rds.gr_rds_freq_divider_sptr___deref__(*args)

    __swig_destroy__ = _rds.delete_gr_rds_freq_divider_sptr
    __del__ = lambda self : None;
    def history(*args):
        """history(self) -> unsigned int"""
        return _rds.gr_rds_freq_divider_sptr_history(*args)

    def output_multiple(*args):
        """output_multiple(self) -> int"""
        return _rds.gr_rds_freq_divider_sptr_output_multiple(*args)

    def relative_rate(*args):
        """relative_rate(self) -> double"""
        return _rds.gr_rds_freq_divider_sptr_relative_rate(*args)

    def start(*args):
        """start(self) -> bool"""
        return _rds.gr_rds_freq_divider_sptr_start(*args)

    def stop(*args):
        """stop(self) -> bool"""
        return _rds.gr_rds_freq_divider_sptr_stop(*args)

    def detail(*args):
        """detail(self) -> gr_block_detail_sptr"""
        return _rds.gr_rds_freq_divider_sptr_detail(*args)

    def set_detail(*args):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _rds.gr_rds_freq_divider_sptr_set_detail(*args)

    def name(*args):
        """name(self) -> string"""
        return _rds.gr_rds_freq_divider_sptr_name(*args)

    def input_signature(*args):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _rds.gr_rds_freq_divider_sptr_input_signature(*args)

    def output_signature(*args):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _rds.gr_rds_freq_divider_sptr_output_signature(*args)

    def unique_id(*args):
        """unique_id(self) -> long"""
        return _rds.gr_rds_freq_divider_sptr_unique_id(*args)

    def basic_block(*args):
        """basic_block(self) -> gr_basic_block_sptr"""
        return _rds.gr_rds_freq_divider_sptr_basic_block(*args)

    def check_topology(*args):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _rds.gr_rds_freq_divider_sptr_check_topology(*args)

gr_rds_freq_divider_sptr_swigregister = _rds.gr_rds_freq_divider_sptr_swigregister
gr_rds_freq_divider_sptr_swigregister(gr_rds_freq_divider_sptr)


def gr_rds_freq_divider_block(*args):
  """gr_rds_freq_divider_block(gr_rds_freq_divider_sptr r) -> gr_block_sptr"""
  return _rds.gr_rds_freq_divider_block(*args)
gr_rds_freq_divider_sptr.block = lambda self: gr_rds_freq_divider_block (self)
gr_rds_freq_divider_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def freq_divider(*args):
  """freq_divider(unsigned int divider) -> gr_rds_freq_divider_sptr"""
  return _rds.freq_divider(*args)


