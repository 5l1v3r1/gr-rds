/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gr_rds_data_encoder.h>
#include <gr_io_signature.h>
#include <math.h>

gr_rds_data_encoder_sptr gr_rds_make_data_encoder (const char *xmlfile) {
	return gr_rds_data_encoder_sptr (new gr_rds_data_encoder (xmlfile));
}

gr_rds_data_encoder::gr_rds_data_encoder (const char *xmlfile)
  : gr_sync_block ("gr_rds_data_encoder",
			gr_make_io_signature (0, 0, 0),
			gr_make_io_signature (1, 1, sizeof (bool)))
{
// initializes the library, checks for potential ABI mismatches
	LIBXML_TEST_VERSION
	read_xml(xmlfile);
}

gr_rds_data_encoder::~gr_rds_data_encoder () {
	xmlCleanupParser();		// Cleanup function for the XML library
	xmlMemoryDump();		// this is to debug memory for regression tests
}

///////////////////////////////////////////////////

void gr_rds_data_encoder::reset_rds_data(){
	for(int i=0; i<4; i++) group[i]=0;
	PI=0;
	TP=false;
	PTY=0;
	TA=false;
	MuSp=false;
	MS=false;
	AH=false;
	compressed=false;
	static_pty=false;
	memset(PS,' ',sizeof(PS));
	PS[8]='\0';
	memset(radiotext,' ',sizeof(radiotext));
	radiotext[64] = '\0';
	radiotext_AB_flag=0;
}

void gr_rds_data_encoder::print_element_names(xmlNode * a_node){
	xmlNode *cur_node = NULL;
	char *node_name='\0', *attribute='\0', *value='\0';

	for (cur_node = a_node; cur_node; cur_node = cur_node->next) {
		if (cur_node->type == XML_ELEMENT_NODE){
			node_name=(char*)cur_node->name;
			if(!strcmp(node_name, "rds")) ;		//move on
			else if(!strcmp(node_name, "group")){
				attribute=(char*)xmlGetProp(cur_node, (const xmlChar *)"type");
				printf("group type: %s\n", attribute);
			}
			else if(!strcmp(node_name, "field")){
				attribute=(char*)xmlGetProp(cur_node, (const xmlChar *)"name");
				value=(char*)xmlNodeGetContent(cur_node);
				printf("\t%s: %s\n", attribute, value);
			}
			else printf("invalid node name: %s\n", node_name);
		}
		print_element_names(cur_node->children);
	}
}

int gr_rds_data_encoder::read_xml (const char *xmlfile){
	xmlDoc *doc;
	xmlNode *root_element = NULL;

	doc = xmlParseFile(xmlfile);
	if (doc == NULL) {
		fprintf(stderr, "Failed to parse %s\n", xmlfile);
		return 1;
	}
	root_element = xmlDocGetRootElement(doc);
// The root element MUST be "rds"
	if(strcmp((char*)root_element->name, "rds")){
		fprintf(stderr, "invalid XML root element!\n");
		return 1;
	}
	print_element_names(root_element);

	xmlFreeDoc(doc);
	return 0;
}

/* the plan for now is to do group0 (basic), group2 (radiotext),
 * group4a (clocktime), and group8a (tmc)... */
int gr_rds_data_encoder::work (int noutput_items,
					gr_vector_const_void_star &input_items,
					gr_vector_void_star &output_items)
{
	return noutput_items;
}
