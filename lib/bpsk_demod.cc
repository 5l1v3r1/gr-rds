/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef DEBUG
#define DBG(x) x 
#else
#define DBG(x)
#endif

#include "bpsk_demod.h"
#include <gnuradio/io_signature.h>

#include <fstream>

using namespace gr::rds;

bpsk_demod::sptr
bpsk_demod::make(double sampling_rate) {
	return gnuradio::get_initial_sptr(new bpsk_demod(sampling_rate));
}

/*
 * The private constructor
 */
bpsk_demod::bpsk_demod (double input_sampling_rate)
	: gr::block("gr_rds_bpsk_demod",
			gr::io_signature::make(2, 2, sizeof(float)),
			gr::io_signature::make (1, 8, sizeof(bool)))
{
	SYMBOL_LENGTH = (int)(input_sampling_rate/1187.5);

/* set approximate output_rate/input_rate
 * for the buffer allocator and the scheduler */
	set_relative_rate(1/SYMBOL_LENGTH);
	reset();
}

/*
 * Our virtual destructor.
 */
bpsk_demod::~bpsk_demod (){
}

void bpsk_demod::reset() {
	d_zc = 0;
	d_last_zc=0;
	d_sign_last = 0;
	synccounter=0;
	enter_looking();
}

void bpsk_demod::enter_looking () {
	printf (">>> bpsk demodulator enter_looking\n");
	d_state = ST_LOOKING;
}

void  bpsk_demod::enter_locked () {
	printf(">>> bpsk demodulator enter_locked\n");
	d_state = ST_LOCKED;
	d_symbol_integrator = 0;
	d_sign_last = 0;
}


////////////////////////////////////////////////////////////////
int bpsk_demod::general_work (int noutput_items,
					gr_vector_int &ninput_items,
					gr_vector_const_void_star &input_items,
					gr_vector_void_star &output_items)
{
	const float *in = (const float *) input_items[0];
	const float *clk = (const float *) input_items[1];
	bool *out = (bool *) output_items[0];
	int n_in = ninput_items[0];
	int n_clk_in = ninput_items[1];
	int i = 0;
	int nout = 0;
	int cons=0;
	int sign_current = 0;

	switch (d_state){
		case ST_LOCKED:
			if(d_sign_last == 0) d_sign_last = (clk[0]>0?1:-1);
			for(i=0; (i<n_in)&&(i<n_clk_in); i++) {
				sign_current = (clk[i]>0?1:-1);
				if(sign_current != d_sign_last) d_zc++; // a zero cross in clk
				d_sign_last = sign_current;
				d_symbol_integrator += (in[i]*clk[i]);
				if(d_zc >= 2) {
// Two zero crossings in clock - that's a symbol
					out[nout] = (d_symbol_integrator>0?1:0);
					nout++;
					d_symbol_integrator = 0;
					d_zc = 0;
				}
			}
			consume_each (i);
			return nout; 
		case ST_LOOKING:
// adjust clock and signal; if fine: go locked 
			if(d_sign_last == 0) d_sign_last = (in[0]>0?1:-1);
			for(i=0; i<n_in; i++) {
				sign_current = (in[i]>0?1:-1);
				if(sign_current != d_sign_last) {
// Remember the zero crossing and check next time
// if it was a half or a whole symbol
					if(d_last_zc!=0) {
						int delta = i-d_last_zc;
						if(abs(delta-SYMBOL_LENGTH)<10) {
// That was a 1, 0 or 0, 1 in signal
// i is now pointing at the middle of a symbol
							consume(0, i-(delta/2));
							i=i-(delta/2);
							d_sign_last = (clk[i]>0?1:-1);
							for (; i<n_clk_in; i++) {
								sign_current = (clk[i]>0?1:-1);
								if(sign_current!=d_sign_last) {
// zero crossing in clock
									consume(1,i);
									break;
								}
								d_sign_last = sign_current;
								if (synccounter++==100) enter_locked();
								return 0;
// No output produced, but now clock and signal are synced
							}
						}
						d_last_zc = i;
					}
					d_sign_last = sign_current;
				}
			}
			d_last_zc = d_last_zc-n_in;
			cons = (n_in>n_clk_in?n_clk_in:n_in);
			consume_each(cons);
			return 0;
		default:
			enter_looking();
			return 0;
		break;
	}
}
